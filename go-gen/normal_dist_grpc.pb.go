// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: normal_dist.proto

package go_gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NormalDistributionClient is the client API for NormalDistribution service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NormalDistributionClient interface {
	CalculatePi(ctx context.Context, in *PiRequest, opts ...grpc.CallOption) (*PiResponse, error)
	CalculateExp(ctx context.Context, in *ExpRequest, opts ...grpc.CallOption) (*ExpResponse, error)
}

type normalDistributionClient struct {
	cc grpc.ClientConnInterface
}

func NewNormalDistributionClient(cc grpc.ClientConnInterface) NormalDistributionClient {
	return &normalDistributionClient{cc}
}

func (c *normalDistributionClient) CalculatePi(ctx context.Context, in *PiRequest, opts ...grpc.CallOption) (*PiResponse, error) {
	out := new(PiResponse)
	err := c.cc.Invoke(ctx, "/main.NormalDistribution/CalculatePi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *normalDistributionClient) CalculateExp(ctx context.Context, in *ExpRequest, opts ...grpc.CallOption) (*ExpResponse, error) {
	out := new(ExpResponse)
	err := c.cc.Invoke(ctx, "/main.NormalDistribution/CalculateExp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NormalDistributionServer is the server API for NormalDistribution service.
// All implementations must embed UnimplementedNormalDistributionServer
// for forward compatibility
type NormalDistributionServer interface {
	CalculatePi(context.Context, *PiRequest) (*PiResponse, error)
	CalculateExp(context.Context, *ExpRequest) (*ExpResponse, error)
	mustEmbedUnimplementedNormalDistributionServer()
}

// UnimplementedNormalDistributionServer must be embedded to have forward compatible implementations.
type UnimplementedNormalDistributionServer struct {
}

func (UnimplementedNormalDistributionServer) CalculatePi(context.Context, *PiRequest) (*PiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculatePi not implemented")
}
func (UnimplementedNormalDistributionServer) CalculateExp(context.Context, *ExpRequest) (*ExpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateExp not implemented")
}
func (UnimplementedNormalDistributionServer) mustEmbedUnimplementedNormalDistributionServer() {}

// UnsafeNormalDistributionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NormalDistributionServer will
// result in compilation errors.
type UnsafeNormalDistributionServer interface {
	mustEmbedUnimplementedNormalDistributionServer()
}

func RegisterNormalDistributionServer(s grpc.ServiceRegistrar, srv NormalDistributionServer) {
	s.RegisterService(&NormalDistribution_ServiceDesc, srv)
}

func _NormalDistribution_CalculatePi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NormalDistributionServer).CalculatePi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.NormalDistribution/CalculatePi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NormalDistributionServer).CalculatePi(ctx, req.(*PiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NormalDistribution_CalculateExp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NormalDistributionServer).CalculateExp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.NormalDistribution/CalculateExp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NormalDistributionServer).CalculateExp(ctx, req.(*ExpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NormalDistribution_ServiceDesc is the grpc.ServiceDesc for NormalDistribution service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NormalDistribution_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.NormalDistribution",
	HandlerType: (*NormalDistributionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CalculatePi",
			Handler:    _NormalDistribution_CalculatePi_Handler,
		},
		{
			MethodName: "CalculateExp",
			Handler:    _NormalDistribution_CalculateExp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "normal_dist.proto",
}
